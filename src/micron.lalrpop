use std::str::FromStr;
use crate::ast::{Expr, Opcode, Statement}; // (0)

grammar;

pub Statement: Box<Statement> = {

    "let" <v:Variable> "=" <e:Expr> ";" => Box::new(Statement::Assignment(v,e))
}

pub Expr: Box<Expr> = { // (1)
    Expr ExprOp Factor => Box::new(Expr::Op(<>)), // (2)
    Factor,
};

ExprOp: Opcode = { // (3)
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::Op(<>)),
    Term,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Term: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)), // (4)
    "(" <Expr> ")"
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};

Variable: String = {
    r"[a-zA-Z]+" => String::from_str(<>).unwrap()
};